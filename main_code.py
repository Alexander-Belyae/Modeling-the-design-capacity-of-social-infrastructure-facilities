# -*- coding: utf-8 -*-
"""Копия блокнота "Копия блокнота "school6""

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QqAJFLVGWbxwdciABVjTLN3E-sW61-zM
"""

# Установка необходимых библиотек
!pip install scikit-learn==1.2.2
!pip install catboost
!pip install optuna
!pip install numpy==1.23.5

import geopandas as gpd
import pandas as pd
import numpy as np
from shapely.geometry import Point, Polygon
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, VotingRegressor
from xgboost import XGBRegressor
import lightgbm as lgb
from catboost import CatBoostRegressor
import shap
import joblib
import optuna

# Загрузка данных и проверка на корректность столбцов
def load_geodata(file_path):
    """
    Загрузка геопространственных данных и очистка названий столбцов.
    """
    gdf = gpd.read_file(file_path)
    # Очистка названий столбцов (удаление лишних пробелов и скрытых символов)
    gdf.columns = gdf.columns.str.strip()

    # Проверка наличия столбца 'levels'
    if 'levels' not in gdf.columns:
        print("Столбец 'levels' отсутствует в данных. Создаем его со значением по умолчанию 0.")
        gdf['levels'] = 0  # или установите другое значение по умолчанию, если это необходимо

    # Приведение типа столбца 'levels' к целому числу
    gdf['levels'] = pd.to_numeric(gdf['levels'], errors='coerce').fillna(0).astype(int)
    return gdf

def compute_geometric_features(gdf):
    """
    Вычисление геометрических характеристик, включая количество вершин.
    """
    # Вычисляем стандартные характеристики
    gdf['compactness'] = (4 * np.pi * gdf['area']) / (gdf['perimeter'] ** 2)
    gdf['bounding_box'] = gdf['geometry'].apply(lambda x: x.minimum_rotated_rectangle)

    def calculate_length_and_width(polygon):
        coords = list(polygon.exterior.coords)
        side_lengths = [np.linalg.norm(np.array(coords[i]) - np.array(coords[i - 1])) for i in range(1, len(coords))]
        return max(side_lengths), min(side_lengths)

    gdf[['length', 'width']] = gdf['bounding_box'].apply(lambda x: pd.Series(calculate_length_and_width(x)))

    gdf['centroid_x'] = gdf['geometry'].centroid.x
    gdf['centroid_y'] = gdf['geometry'].centroid.y

    gdf['area_perimeter_ratio'] = gdf['area'] / gdf['perimeter']

    def count_vertices(geometry):
        if geometry.is_empty or geometry is None:
            return 0
        if geometry.type == 'Polygon':
            return len(geometry.exterior.coords)
        if geometry.type == 'MultiPolygon':
            return sum(len(polygon.exterior.coords) for polygon in geometry.geoms)
        return 0

    gdf['vertex_count'] = gdf.geometry.apply(count_vertices)
    gdf['convex_hull'] = gdf['geometry'].convex_hull
    gdf['convex_hull_area'] = gdf['convex_hull'].area
    gdf['convexity_ratio'] = gdf['area'] / gdf['convex_hull_area']
    gdf['centroid_distance_from_origin'] = np.sqrt(gdf['centroid_x']**2 + gdf['centroid_y']**2)

    return gdf.drop(columns=['bounding_box', 'convex_hull'])

def save_data(gdf, output_file_path):
    gdf.to_file(output_file_path, driver='GeoJSON')

def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    return rmse, y_pred

def cross_validate_model(model, X, y):
    scores = cross_val_score(model, X, y, cv=5, scoring='neg_mean_squared_error')
    return np.sqrt(-scores).mean()

def plot_feature_importance(model, features):
    importances = model.feature_importances_
    plt.figure(figsize=(12, 8))
    sns.barplot(x=importances, y=features, palette="viridis", hue=None, legend=False)
    plt.title("Feature Importance")
    plt.xlabel("Importance")
    plt.ylabel("Feature")
    plt.show()

def optimize_xgboost_with_optuna(X_train, y_train):
    def objective(trial):
        params = {
            'n_estimators': trial.suggest_int('n_estimators', 100, 1000),
            'max_depth': trial.suggest_int('max_depth', 3, 10),
            'learning_rate': trial.suggest_loguniform('learning_rate', 0.01, 0.3),
            'subsample': trial.suggest_uniform('subsample', 0.6, 1.0),
            'colsample_bytree': trial.suggest_uniform('colsample_bytree', 0.6, 1.0),
            'reg_alpha': trial.suggest_loguniform('reg_alpha', 1e-5, 1.0),
            'reg_lambda': trial.suggest_loguniform('reg_lambda', 1e-5, 1.0)
        }
        model = XGBRegressor(**params, random_state=42)
        score = cross_validate_model(model, X_train, y_train)
        return score

    study = optuna.create_study(direction='minimize')
    study.optimize(objective, n_trials=50)
    best_params = study.best_params
    return XGBRegressor(**best_params, random_state=42)

file_path = '/content/schools.geojson'
schools_gdf = load_geodata(file_path)

schools_gdf = compute_geometric_features(schools_gdf)

features = ['area', 'perimeter', 'compactness', 'levels', 'length', 'width', 'area_perimeter_ratio', 'vertex_count', 'convexity_ratio']
X = schools_gdf[features]
y = schools_gdf['rgisCAPACITY']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

best_xgboost = optimize_xgboost_with_optuna(X_train, y_train)
best_xgboost.fit(X_train, y_train)
rmse, y_pred = evaluate_model(best_xgboost, X_test, y_test)
print(f"Optimized XGBoost RMSE: {rmse}")

cat_model = CatBoostRegressor(iterations=1000, learning_rate=0.05, depth=6, random_state=42, verbose=0)
lgb_model = lgb.LGBMRegressor(n_estimators=1000, learning_rate=0.05, max_depth=6, random_state=42)
rf_model = RandomForestRegressor(n_estimators=1000, random_state=42)
gb_model = GradientBoostingRegressor(n_estimators=1000, learning_rate=0.05, max_depth=6, random_state=42)

cat_model.fit(X_train, y_train)
lgb_model.fit(X_train, y_train)
rf_model.fit(X_train, y_train)
gb_model.fit(X_train, y_train)

ensemble_model = VotingRegressor(estimators=[('cat', cat_model), ('lgb', lgb_model), ('xgb', best_xgboost), ('rf', rf_model), ('gb', gb_model)])
ensemble_model.fit(X_train, y_train)

ensemble_rmse, ensemble_y_pred = evaluate_model(ensemble_model, X_test, y_test)
print(f"Ensemble Model RMSE: {ensemble_rmse}")

plot_feature_importance(best_xgboost, features)
# Сохранение лучшей модели
def save_model(model, file_name):
    joblib.dump(model, file_name)

# Прогноз для новой школы
new_school_file_path = 'school_msk2_test.geojson'
new_school_gdf = gpd.read_file(new_school_file_path)
new_school_gdf = compute_geometric_features(new_school_gdf)
X_new = new_school_gdf[features]

predicted_capacity = ensemble_model.predict(X_new)
new_school_gdf['predicted_rgisCAPACITY'] = predicted_capacity

print(new_school_gdf[['predicted_rgisCAPACITY']])

new_school_output_file_path = 'school_msk_test_with_prediction.geojson'
new_school_gdf.to_file(new_school_output_file_path, driver='GeoJSON')

# Визуализация результатов
plt.figure(figsize=(8, 6))
plt.scatter(y_test, ensemble_y_pred, alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linestyle='--')
plt.title("Проектная мощность школ тестовой выборки")
plt.xlabel("Реальная проектная мощность")
plt.ylabel("Рассчитанная проектная мощность")
plt.show()

# Прогноз для новой школы
new_school_file_path = 'schools_test.geojson'
new_school_gdf = gpd.read_file(new_school_file_path)
new_school_gdf = compute_geometric_features(new_school_gdf)

X_new = new_school_gdf[features]

# Заполнение пропущенных значений средними значениями из обучающей выборки
X_new_filled = X_new.fillna(X.mean())

# Предсказание мощности
predicted_capacity = ensemble_model.predict(X_new_filled)
new_school_gdf['predicted_rgisCAPACITY'] = predicted_capacity

# Сохранение результатов
print(new_school_gdf[['predicted_rgisCAPACITY']])

new_school_output_file_path = 'schools_test_with_prediction.geojson'
new_school_gdf.to_file(new_school_output_file_path, driver='GeoJSON')

# Визуализация результатов
plt.figure(figsize=(8, 6))
plt.scatter(y_test, ensemble_y_pred, alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linestyle='--')
plt.title("Проектная мощность школ тестовой выборки")
plt.xlabel("Реальная проектная мощность")
plt.ylabel("Рассчитанная проектная мощность")
plt.grid(True)
plt.tight_layout()
plt.show()